<?xml version="1.0"?>
<robot xmlns:xacro="http://www.ros.org/wiki/xacro">

  <!--                                                                      -->
  <!-- MACRO FOR THRUSTER UNITS  -->
  <!--                                                                      -->

  <!-- Provide the propeller mesh in a separate file with the rotation axis
  over propeller's frame X-axis in DAE (Collada) or STL format.
  -->
  <!-- I stole this dae file from https://github.com/francisc0garcia/robdos_sim/blob/master/models/robdos_model_thrust.dae -->
  <xacro:property name="prop_mesh_file" value="file://$(find mantaray_description)/meshes/mantaray_prop.dae"/>

  <!--
    Thruster macro with integration of joint and link. The thrusters should
    be initialized in the actuators.xacro file.
  -->

  <xacro:macro name="thruster_macro" params="namespace thruster_id *origin">
    <joint name="${namespace}/thruster_${thruster_id}_joint" type="continuous">
      <xacro:insert_block name="origin"/>
      <axis xyz="1 0 0"/>
      <parent link="${namespace}/base_link"/>
      <child link="${namespace}/thruster_${thruster_id}"/>
    </joint>
    <link name="${namespace}/thruster_${thruster_id}">
      <xacro:box_inertial x="113" y="97" z="97" mass="0.344"> <!--Mass in air is 344 g and in water is 156g-->
        <origin xyz="0 0 0" rpy="0 0 0"/>
      </xacro:box_inertial>
      <visual>
        <origin rpy="0 0 0" xyz="0 0 0"/>
        <geometry>
          <mesh filename="${prop_mesh_file}" scale="1 1 1"/>
        </geometry>
      </visual>
      <collision>
        <geometry>
          <cylinder length="0.000001" radius="0.000001"/>
        </geometry>
        <origin xyz="0 0 0" rpy="0 0 0"/>
      </collision>
    </link>
    <gazebo>
      <plugin name="${namespace}_${thruster_id}_thruster_model" filename="libuuv_thruster_ros_plugin.so">
        <linkName>${namespace}/thruster_${thruster_id}</linkName>
        <jointName>${namespace}/thruster_${thruster_id}_joint</jointName>
        <thrusterID>${thruster_id}</thrusterID>

        <dynamics>
          <type>FirstOrder</type>
          <timeConstant>0.05</timeConstant>
        </dynamics>
        <conversion>
          <type>Basic</type>
          <rotorConstant>0.00031</rotorConstant>
        </conversion>
      </plugin>
    </gazebo>

    <gazebo reference="${namespace}/thruster_${thruster_id}">
      <selfCollide>false</selfCollide>
    </gazebo>
  </xacro:macro>

  <!-- <xacro:macro name="thruster_macro"
    params="namespace thruster_id *origin">
    <xacro:thruster_module_first_order_basic_fcn_macro
      namespace="${namespace}"
      thruster_id="${thruster_id}"
      mesh_filename="file://$(find mantaray_description)/meshes/robdos_model_thrust.dae"
      dyn_time_constant="0.05"  
      rotor_constant="0.026546960744430276">
      <xacro:insert_block name="origin"/>
    </xacro:thruster_module_first_order_basic_fcn_macro>
  </xacro:macro> -->

  <!-- Ask david about dynaic time constant -->
  <!-- Look at the datasheet for rotor constant -->

  <!--                                                                      -->
  <!-- MACRO FOR FIN/RUDDER UNITS  -->
  <!--                                                                      -->

  <!--
    This macro can be used to add fins to the body of the vehicle, the fins
    should be initialized in the actuators.xacro file. If you vehicle has no
    fins, you can erase the macro below.
  -->

  <!-- A separate mesh for the fin should be stored in the meshes folder -->
  <xacro:property name="fin_mesh_file" value="file://$(find mantaray_description)/meshes/fin.dae"/>

  <!-- Fin joint limits  -->
  <xacro:property name="fin_min_joint_limit" value="${0.0 * d2r}"/>
  <xacro:property name="fin_max_joint_limit" value="${0.0 * d2r}"/>

  <xacro:macro name="fin_macro" params="namespace fin_id *origin">
      <joint name="${namespace}/fin${fin_id}_joint" type="revolute">
          <limit effort="0" lower="${fin_min_joint_limit}" upper="${fin_max_joint_limit}" velocity="0"/>
          <xacro:insert_block name="origin"/>
          <axis xyz="0 0 1"/>
          <parent link="${namespace}/base_link" />
          <child link="${namespace}/fin${fin_id}" />
      </joint>

      <link name="${namespace}/fin${fin_id}">
        <inertial>
          <mass value="0.001" />
          <origin xyz="0 0 0" rpy="0 0 0"/>
          <inertia ixx="0.000000017" ixy="0.0" ixz="0.0"
                 iyy="0.000000017" iyz="0.0"
                 izz="0.000000017" />
        </inertial>
        <visual>
          <origin xyz="0 0 0" rpy="0 0 0" />
          <geometry>
            <mesh filename="${fin_mesh_file}" scale="1 1 1"/>
          </geometry>
        </visual>
      </link>

      <gazebo>
        <plugin name="${namespace}_fin${fin_id}_model" filename="libuuv_fin_ros_plugin.so">

          <!--
            First order dynamics model for the fin joint dynamics,
            replace an appropriate time constant
          -->
          <dynamics>
            <type>FirstOrder</type>
            <timeConstant>0.0</timeConstant>
          </dynamics>

          <!--
            Definition of the lift and drag model, choose ONE of the models
            below according to the model you want to use.
          -->

          <!--
            1) References for the two line lift and drag model:
              [1] https://en.wikipedia.org/wiki/Lift_coefficient
              [2] http://gazebosim.org/tutorials?tut=aerodynamics&cat=plugins
          -->
          <liftdrag>
            <type>TwoLines</type>
            <area>${replace here the value for the area of the fin's cross section}</area>
            <fluid_density>0.0</fluid_density>
            <a0>0.0</a0>
            <alpha_stall>0.0</alpha_stall>
            <cla>0.0</cla><!-- ^= 0.244 when using deg -->
            <cla_stall>0.0</cla_stall>
            <cda>0.0</cda>
            <cda_stall>0.0</cda_stall>
          </liftdrag>

          <!--
            2) Reference for the quadratic lift and drag model:
              [1] Engelhardtsen, Oystein. 3D AUV Collision Avoidance.
                  MS thesis. Institutt for teknisk kybernetikk, 2007.
                  https://brage.bibsys.no/xmlui/handle/11250/259834
          -->
          <liftdrag>
            <type>Quadratic</type>
            <lift_constant>0.0</lift_constant>
            <drag_constant>0.0</drag_constant>
          </liftdrag>

          <!--
            Further parameters necessary for the lift and drag plugin
          -->

          <!-- Current velocity topic -->
          <current_velocity_topic>/hydrodynamics/current_velocity</current_velocity_topic>

          <!-- Name of the correspodent fin link and joint  -->
          <link_name>${namespace}/fin${fin_id}</link_name>
          <joint_name>${namespace}/fin${fin_id}_joint</joint_name>

          <!-- Output topic to publish the current angle of the fin joint -->
          <output_topic>${namespace}/fins/${fin_id}/output</output_topic>
          <input_topic>${namespace}/fins/${fin_id}/input</input_topic>
          <wrench_topic>${namespace}/fins/${fin_id}/wrench_topic</wrench_topic>
        </plugin>
      </gazebo>
  </xacro:macro>

</robot>
